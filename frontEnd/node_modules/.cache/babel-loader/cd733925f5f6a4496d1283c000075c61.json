{"ast":null,"code":"/*\r\n * Copyright (c) 2017-2019 Rafael da Silva Rocha.\r\n *\r\n * Permission is hereby granted, free of charge, to any person obtaining\r\n * a copy of this software and associated documentation files (the\r\n * \"Software\"), to deal in the Software without restriction, including\r\n * without limitation the rights to use, copy, modify, merge, publish,\r\n * distribute, sublicense, and/or sell copies of the Software, and to\r\n * permit persons to whom the Software is furnished to do so, subject to\r\n * the following conditions:\r\n *\r\n * The above copyright notice and this permission notice shall be\r\n * included in all copies or substantial portions of the Software.\r\n *\r\n * THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND,\r\n * EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF\r\n * MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND\r\n * NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE\r\n * LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION\r\n * OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION\r\n * WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.\r\n *\r\n */\n\n/**\r\n * @fileoverview The WaveFile class.\r\n * @see https://github.com/rochars/wavefile\r\n */\n\n/** @module wavefile */\nimport { encode, decode } from './lib/parsers/base64-arraybuffer.js';\nimport { WaveFileConverter } from './lib/wavefile-converter';\n/**\r\n * A class to manipulate wav files.\r\n * @extends WaveFileConverter\r\n */\n\nexport class WaveFile extends WaveFileConverter {\n  /**\r\n   * @param {Uint8Array=} wav A wave file buffer.\r\n   * @throws {Error} If container is not RIFF, RIFX or RF64.\r\n   * @throws {Error} If format is not WAVE.\r\n   * @throws {Error} If no 'fmt ' chunk is found.\r\n   * @throws {Error} If no 'data' chunk is found.\r\n   */\n  constructor(wav) {\n    super();\n\n    if (wav) {\n      this.fromBuffer(wav);\n    }\n  }\n  /**\r\n   * Use a .wav file encoded as a base64 string to load the WaveFile object.\r\n   * @param {string} base64String A .wav file as a base64 string.\r\n   * @throws {Error} If any property of the object appears invalid.\r\n   */\n\n\n  fromBase64(base64String) {\n    this.fromBuffer(decode(base64String));\n  }\n  /**\r\n   * Return a base64 string representig the WaveFile object as a .wav file.\r\n   * @return {string} A .wav file as a base64 string.\r\n   * @throws {Error} If any property of the object appears invalid.\r\n   */\n\n\n  toBase64() {\n    return encode(this.toBuffer());\n  }\n  /**\r\n   * Return a DataURI string representig the WaveFile object as a .wav file.\r\n   * The return of this method can be used to load the audio in browsers.\r\n   * @return {string} A .wav file as a DataURI.\r\n   * @throws {Error} If any property of the object appears invalid.\r\n   */\n\n\n  toDataURI() {\n    return 'data:audio/wav;base64,' + this.toBase64();\n  }\n  /**\r\n   * Use a .wav file encoded as a DataURI to load the WaveFile object.\r\n   * @param {string} dataURI A .wav file as DataURI.\r\n   * @throws {Error} If any property of the object appears invalid.\r\n   */\n\n\n  fromDataURI(dataURI) {\n    this.fromBase64(dataURI.replace('data:audio/wav;base64,', ''));\n  }\n\n}","map":{"version":3,"sources":["/Users/kevin/Documents/GitHub/Nyquist_Shannon_MVP/frontEnd/node_modules/wavefile/index.js"],"names":["encode","decode","WaveFileConverter","WaveFile","constructor","wav","fromBuffer","fromBase64","base64String","toBase64","toBuffer","toDataURI","fromDataURI","dataURI","replace"],"mappings":"AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AAEA,SAASA,MAAT,EAAiBC,MAAjB,QAA+B,qCAA/B;AACA,SAASC,iBAAT,QAAkC,0BAAlC;AAEA;AACA;AACA;AACA;;AACA,OAAO,MAAMC,QAAN,SAAuBD,iBAAvB,CAAyC;AAE9C;AACF;AACA;AACA;AACA;AACA;AACA;AACEE,EAAAA,WAAW,CAACC,GAAD,EAAM;AACf;;AACA,QAAIA,GAAJ,EAAS;AACP,WAAKC,UAAL,CAAgBD,GAAhB;AACD;AACF;AAED;AACF;AACA;AACA;AACA;;;AACEE,EAAAA,UAAU,CAACC,YAAD,EAAe;AACvB,SAAKF,UAAL,CAAgBL,MAAM,CAACO,YAAD,CAAtB;AACD;AAED;AACF;AACA;AACA;AACA;;;AACEC,EAAAA,QAAQ,GAAG;AACT,WAAOT,MAAM,CAAC,KAAKU,QAAL,EAAD,CAAb;AACD;AAED;AACF;AACA;AACA;AACA;AACA;;;AACEC,EAAAA,SAAS,GAAG;AACV,WAAO,2BAA2B,KAAKF,QAAL,EAAlC;AACD;AAED;AACF;AACA;AACA;AACA;;;AACEG,EAAAA,WAAW,CAACC,OAAD,EAAU;AACnB,SAAKN,UAAL,CAAgBM,OAAO,CAACC,OAAR,CAAgB,wBAAhB,EAA0C,EAA1C,CAAhB;AACD;;AAnD6C","sourcesContent":["/*\r\n * Copyright (c) 2017-2019 Rafael da Silva Rocha.\r\n *\r\n * Permission is hereby granted, free of charge, to any person obtaining\r\n * a copy of this software and associated documentation files (the\r\n * \"Software\"), to deal in the Software without restriction, including\r\n * without limitation the rights to use, copy, modify, merge, publish,\r\n * distribute, sublicense, and/or sell copies of the Software, and to\r\n * permit persons to whom the Software is furnished to do so, subject to\r\n * the following conditions:\r\n *\r\n * The above copyright notice and this permission notice shall be\r\n * included in all copies or substantial portions of the Software.\r\n *\r\n * THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND,\r\n * EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF\r\n * MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND\r\n * NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE\r\n * LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION\r\n * OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION\r\n * WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.\r\n *\r\n */\r\n\r\n/**\r\n * @fileoverview The WaveFile class.\r\n * @see https://github.com/rochars/wavefile\r\n */\r\n\r\n/** @module wavefile */\r\n\r\nimport { encode, decode } from './lib/parsers/base64-arraybuffer.js';\r\nimport { WaveFileConverter } from './lib/wavefile-converter';\r\n\r\n/**\r\n * A class to manipulate wav files.\r\n * @extends WaveFileConverter\r\n */\r\nexport class WaveFile extends WaveFileConverter {\r\n\r\n  /**\r\n   * @param {Uint8Array=} wav A wave file buffer.\r\n   * @throws {Error} If container is not RIFF, RIFX or RF64.\r\n   * @throws {Error} If format is not WAVE.\r\n   * @throws {Error} If no 'fmt ' chunk is found.\r\n   * @throws {Error} If no 'data' chunk is found.\r\n   */\r\n  constructor(wav) {\r\n    super();\r\n    if (wav) {\r\n      this.fromBuffer(wav);\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Use a .wav file encoded as a base64 string to load the WaveFile object.\r\n   * @param {string} base64String A .wav file as a base64 string.\r\n   * @throws {Error} If any property of the object appears invalid.\r\n   */\r\n  fromBase64(base64String) {\r\n    this.fromBuffer(decode(base64String));\r\n  }\r\n\r\n  /**\r\n   * Return a base64 string representig the WaveFile object as a .wav file.\r\n   * @return {string} A .wav file as a base64 string.\r\n   * @throws {Error} If any property of the object appears invalid.\r\n   */\r\n  toBase64() {\r\n    return encode(this.toBuffer());\r\n  }\r\n\r\n  /**\r\n   * Return a DataURI string representig the WaveFile object as a .wav file.\r\n   * The return of this method can be used to load the audio in browsers.\r\n   * @return {string} A .wav file as a DataURI.\r\n   * @throws {Error} If any property of the object appears invalid.\r\n   */\r\n  toDataURI() {\r\n    return 'data:audio/wav;base64,' + this.toBase64();\r\n  }\r\n\r\n  /**\r\n   * Use a .wav file encoded as a DataURI to load the WaveFile object.\r\n   * @param {string} dataURI A .wav file as DataURI.\r\n   * @throws {Error} If any property of the object appears invalid.\r\n   */\r\n  fromDataURI(dataURI) {\r\n    this.fromBase64(dataURI.replace('data:audio/wav;base64,', ''));\r\n  }\r\n}\r\n"]},"metadata":{},"sourceType":"module"}