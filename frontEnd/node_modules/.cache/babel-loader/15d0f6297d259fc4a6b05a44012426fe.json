{"ast":null,"code":"/*\r\n * Copyright (c) 2019 Rafael da Silva Rocha.\r\n *\r\n * Permission is hereby granted, free of charge, to any person obtaining\r\n * a copy of this software and associated documentation files (the\r\n * \"Software\"), to deal in the Software without restriction, including\r\n * without limitation the rights to use, copy, modify, merge, publish,\r\n * distribute, sublicense, and/or sell copies of the Software, and to\r\n * permit persons to whom the Software is furnished to do so, subject to\r\n * the following conditions:\r\n *\r\n * The above copyright notice and this permission notice shall be\r\n * included in all copies or substantial portions of the Software.\r\n *\r\n * THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND,\r\n * EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF\r\n * MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND\r\n * NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE\r\n * LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION\r\n * OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION\r\n * WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.\r\n *\r\n */\n\n/**\r\n * @fileoverview The resample function.\r\n * @see https://github.com/rochars/wavefile\r\n */\nimport { Interpolator } from './interpolator';\nimport { FIRLPF } from './fir-lpf';\nimport { ButterworthLPF } from './butterworth-lpf';\n/**\r\n * Default use of LPF for each resampling method.\r\n * @readonly\r\n * @enum {boolean}\r\n * @private\r\n */\n\nconst DEFAULT_LPF_USE = {\n  'point': false,\n  'linear': false,\n  'cubic': true,\n  'sinc': true\n};\n/**\r\n * Default LPF order for each type of LPF.\r\n * @readonly\r\n * @enum {number}\r\n * @private\r\n */\n\nconst DEFAULT_LPF_ORDER = {\n  'IIR': 16,\n  'FIR': 71\n};\n/**\r\n * Default LPF class for each type of LPF.\r\n * @readonly\r\n * @enum {!Function}\r\n * @private\r\n */\n\nconst DEFAULT_LPF = {\n  'IIR': ButterworthLPF,\n  'FIR': FIRLPF\n};\n/**\r\n * Change the sample rate of the samples to a new sample rate.\r\n * @param {!Array<number>|!TypedArray} samples The original samples.\r\n * @param {number} oldSampleRate The original sample rate.\r\n * @param {number} sampleRate The target sample rate.\r\n * @param {Object=} options The extra configuration, if needed.\r\n * @return {!Float64Array} the new samples.\r\n */\n\nexport function resample(samples, oldSampleRate, sampleRate) {\n  let options = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : null;\n  options = options || {}; // Make the new sample container\n\n  /** @type {number} */\n\n  let rate = (sampleRate - oldSampleRate) / oldSampleRate + 1;\n  /** @type {!Float64Array} */\n\n  let newSamples = new Float64Array(samples.length * rate); // Create the interpolator\n\n  options.method = options.method || 'cubic';\n  /** @type {!Object} */\n\n  let interpolator = new Interpolator(samples.length, newSamples.length, {\n    method: options.method,\n    tension: options.tension || 0,\n    sincFilterSize: options.sincFilterSize || 6,\n    sincWindow: options.sincWindow || undefined,\n    clip: options.clip || 'mirror'\n  }); // Resample + LPF\n\n  if (options.LPF === undefined) {\n    options.LPF = DEFAULT_LPF_USE[options.method];\n  }\n\n  if (options.LPF) {\n    options.LPFType = options.LPFType || 'IIR';\n    const LPF = DEFAULT_LPF[options.LPFType]; // Upsampling\n\n    if (sampleRate > oldSampleRate) {\n      /** @type {!Object} */\n      let filter = new LPF(options.LPForder || DEFAULT_LPF_ORDER[options.LPFType], sampleRate, oldSampleRate / 2);\n      upsample_(samples, newSamples, interpolator, filter); // Downsampling\n    } else {\n      /** @type {!Object} */\n      let filter = new LPF(options.LPForder || DEFAULT_LPF_ORDER[options.LPFType], oldSampleRate, sampleRate / 2);\n      downsample_(samples, newSamples, interpolator, filter);\n    } // Resample, no LPF\n\n  } else {\n    resample_(samples, newSamples, interpolator);\n  }\n\n  return newSamples;\n}\n/**\r\n * Resample.\r\n * @param {!Array<number>|!TypedArray} samples The original samples.\r\n * @param {!Float64Array} newSamples The container for the new samples.\r\n * @param {Object} interpolator The interpolator.\r\n * @private\r\n */\n\nfunction resample_(samples, newSamples, interpolator) {\n  // Resample\n  for (let i = 0, len = newSamples.length; i < len; i++) {\n    newSamples[i] = interpolator.interpolate(i, samples);\n  }\n}\n/**\r\n * Upsample with LPF.\r\n * @param {!Array<number>|!TypedArray} samples The original samples.\r\n * @param {!Float64Array} newSamples The container for the new samples.\r\n * @param {Object} interpolator The interpolator.\r\n * @param {Object} filter The LPF object.\r\n * @private\r\n */\n\n\nfunction upsample_(samples, newSamples, interpolator, filter) {\n  // Resample and filter\n  for (let i = 0, len = newSamples.length; i < len; i++) {\n    newSamples[i] = filter.filter(interpolator.interpolate(i, samples));\n  } // Reverse filter\n\n\n  filter.reset();\n\n  for (let i = newSamples.length - 1; i >= 0; i--) {\n    newSamples[i] = filter.filter(newSamples[i]);\n  }\n}\n/**\r\n * Downsample with LPF.\r\n * @param {!Array<number>|!TypedArray} samples The original samples.\r\n * @param {!Float64Array} newSamples The container for the new samples.\r\n * @param {Object} interpolator The interpolator.\r\n * @param {Object} filter The LPF object.\r\n * @private\r\n */\n\n\nfunction downsample_(samples, newSamples, interpolator, filter) {\n  // Filter\n  for (let i = 0, len = samples.length; i < len; i++) {\n    samples[i] = filter.filter(samples[i]);\n  } // Reverse filter\n\n\n  filter.reset();\n\n  for (let i = samples.length - 1; i >= 0; i--) {\n    samples[i] = filter.filter(samples[i]);\n  } // Resample\n\n\n  resample_(samples, newSamples, interpolator);\n}","map":{"version":3,"sources":["/Users/kevin/Documents/GitHub/Nyquist_Shannon_MVP/frontEnd/node_modules/wavefile/lib/resampler/index.js"],"names":["Interpolator","FIRLPF","ButterworthLPF","DEFAULT_LPF_USE","DEFAULT_LPF_ORDER","DEFAULT_LPF","resample","samples","oldSampleRate","sampleRate","options","rate","newSamples","Float64Array","length","method","interpolator","tension","sincFilterSize","sincWindow","undefined","clip","LPF","LPFType","filter","LPForder","upsample_","downsample_","resample_","i","len","interpolate","reset"],"mappings":"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","sourcesContent":["/*\r\n * Copyright (c) 2019 Rafael da Silva Rocha.\r\n *\r\n * Permission is hereby granted, free of charge, to any person obtaining\r\n * a copy of this software and associated documentation files (the\r\n * \"Software\"), to deal in the Software without restriction, including\r\n * without limitation the rights to use, copy, modify, merge, publish,\r\n * distribute, sublicense, and/or sell copies of the Software, and to\r\n * permit persons to whom the Software is furnished to do so, subject to\r\n * the following conditions:\r\n *\r\n * The above copyright notice and this permission notice shall be\r\n * included in all copies or substantial portions of the Software.\r\n *\r\n * THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND,\r\n * EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF\r\n * MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND\r\n * NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE\r\n * LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION\r\n * OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION\r\n * WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.\r\n *\r\n */\r\n\r\n/**\r\n * @fileoverview The resample function.\r\n * @see https://github.com/rochars/wavefile\r\n */\r\n\r\nimport { Interpolator } from './interpolator';\r\nimport { FIRLPF } from './fir-lpf';\r\nimport { ButterworthLPF } from './butterworth-lpf';\r\n\r\n/**\r\n * Default use of LPF for each resampling method.\r\n * @readonly\r\n * @enum {boolean}\r\n * @private\r\n */\r\nconst DEFAULT_LPF_USE = {\r\n  'point': false,\r\n  'linear': false,\r\n  'cubic': true,\r\n  'sinc': true\r\n};\r\n\r\n/**\r\n * Default LPF order for each type of LPF.\r\n * @readonly\r\n * @enum {number}\r\n * @private\r\n */\r\nconst DEFAULT_LPF_ORDER = {\r\n  'IIR': 16,\r\n  'FIR': 71\r\n};\r\n\r\n/**\r\n * Default LPF class for each type of LPF.\r\n * @readonly\r\n * @enum {!Function}\r\n * @private\r\n */\r\nconst DEFAULT_LPF = {\r\n  'IIR': ButterworthLPF,\r\n  'FIR': FIRLPF\r\n};\r\n\r\n/**\r\n * Change the sample rate of the samples to a new sample rate.\r\n * @param {!Array<number>|!TypedArray} samples The original samples.\r\n * @param {number} oldSampleRate The original sample rate.\r\n * @param {number} sampleRate The target sample rate.\r\n * @param {Object=} options The extra configuration, if needed.\r\n * @return {!Float64Array} the new samples.\r\n */\r\nexport function resample(samples, oldSampleRate, sampleRate, options=null) {\r\n  options = options || {};\r\n  // Make the new sample container\r\n  /** @type {number} */\r\n  let rate = ((sampleRate - oldSampleRate) / oldSampleRate) + 1;\r\n  /** @type {!Float64Array} */\r\n  let newSamples = new Float64Array(samples.length * (rate));\r\n  // Create the interpolator\r\n  options.method = options.method || 'cubic';\r\n  /** @type {!Object} */\r\n  let interpolator = new Interpolator(\r\n    samples.length,\r\n    newSamples.length,\r\n    {\r\n      method: options.method,\r\n      tension: options.tension || 0,\r\n      sincFilterSize: options.sincFilterSize || 6,\r\n      sincWindow: options.sincWindow || undefined,\r\n      clip: options.clip || 'mirror'\r\n    });\r\n  // Resample + LPF\r\n  if (options.LPF === undefined) {\r\n    options.LPF = DEFAULT_LPF_USE[options.method];\r\n  } \r\n  if (options.LPF) {\r\n    options.LPFType = options.LPFType || 'IIR';\r\n    const LPF = DEFAULT_LPF[options.LPFType];\r\n    // Upsampling\r\n    if (sampleRate > oldSampleRate) {\r\n      /** @type {!Object} */\r\n      let filter = new LPF(\r\n        options.LPForder || DEFAULT_LPF_ORDER[options.LPFType],\r\n        sampleRate,\r\n        (oldSampleRate / 2));\r\n      upsample_(\r\n        samples, newSamples, interpolator, filter);\r\n    // Downsampling\r\n    } else {\r\n      /** @type {!Object} */\r\n      let filter = new LPF(\r\n        options.LPForder || DEFAULT_LPF_ORDER[options.LPFType],\r\n        oldSampleRate,\r\n        sampleRate / 2);\r\n      downsample_(\r\n        samples, newSamples, interpolator, filter);\r\n    }\r\n  // Resample, no LPF\r\n  } else {\r\n    resample_(samples, newSamples, interpolator);\r\n  }\r\n  return newSamples;\r\n}\r\n\r\n/**\r\n * Resample.\r\n * @param {!Array<number>|!TypedArray} samples The original samples.\r\n * @param {!Float64Array} newSamples The container for the new samples.\r\n * @param {Object} interpolator The interpolator.\r\n * @private\r\n */\r\nfunction resample_(samples, newSamples, interpolator) {\r\n  // Resample\r\n  for (let i = 0, len = newSamples.length; i < len; i++) {\r\n    newSamples[i] = interpolator.interpolate(i, samples);\r\n  }\r\n}\r\n\r\n/**\r\n * Upsample with LPF.\r\n * @param {!Array<number>|!TypedArray} samples The original samples.\r\n * @param {!Float64Array} newSamples The container for the new samples.\r\n * @param {Object} interpolator The interpolator.\r\n * @param {Object} filter The LPF object.\r\n * @private\r\n */\r\nfunction upsample_(samples, newSamples, interpolator, filter) {\r\n  // Resample and filter\r\n  for (let i = 0, len = newSamples.length; i < len; i++) {\r\n    newSamples[i] = filter.filter(interpolator.interpolate(i, samples));\r\n  }\r\n  // Reverse filter\r\n  filter.reset();\r\n  for (let i = newSamples.length - 1; i >= 0; i--) {\r\n    newSamples[i]  = filter.filter(newSamples[i]);\r\n  }\r\n}\r\n\r\n/**\r\n * Downsample with LPF.\r\n * @param {!Array<number>|!TypedArray} samples The original samples.\r\n * @param {!Float64Array} newSamples The container for the new samples.\r\n * @param {Object} interpolator The interpolator.\r\n * @param {Object} filter The LPF object.\r\n * @private\r\n */\r\nfunction downsample_(samples, newSamples, interpolator, filter) {\r\n  // Filter\r\n  for (let i = 0, len = samples.length; i < len; i++) {\r\n    samples[i]  = filter.filter(samples[i]);\r\n  }\r\n  // Reverse filter\r\n  filter.reset();\r\n  for (let i = samples.length - 1; i >= 0; i--) {\r\n    samples[i]  = filter.filter(samples[i]);\r\n  }\r\n  // Resample\r\n  resample_(samples, newSamples, interpolator);\r\n}\r\n"]},"metadata":{},"sourceType":"module"}