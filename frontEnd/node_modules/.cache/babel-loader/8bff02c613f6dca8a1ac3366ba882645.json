{"ast":null,"code":"/*\r\n * Copyright (c) 2019 Rafael da Silva Rocha.\r\n * Copyright 2012 Spencer Cohen\r\n *\r\n * Permission is hereby granted, free of charge, to any person obtaining\r\n * a copy of this software and associated documentation files (the\r\n * \"Software\"), to deal in the Software without restriction, including\r\n * without limitation the rights to use, copy, modify, merge, publish,\r\n * distribute, sublicense, and/or sell copies of the Software, and to\r\n * permit persons to whom the Software is furnished to do so, subject to\r\n * the following conditions:\r\n *\r\n * The above copyright notice and this permission notice shall be\r\n * included in all copies or substantial portions of the Software.\r\n *\r\n * THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND,\r\n * EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF\r\n * MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND\r\n * NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE\r\n * LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION\r\n * OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION\r\n * WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.\r\n *\r\n */\n\n/**\r\n * @fileoverview The Interpolator class. Based on Smooth.js by Spencer Cohen.\r\n * @see https://github.com/rochars/wavefile\r\n * @see https://github.com/osuushi/Smooth.js\r\n */\n\n/**\r\n * A class to get scaled values out of arrays.\r\n * @extends WaveFileReader\r\n */\nexport class Interpolator {\n  /**\r\n   * @param {number} scaleFrom the length of the original array.\r\n   * @param {number} scaleTo The length of the new array.\r\n   * @param {!Object} details The extra configuration, if needed.\r\n   */\n  constructor(scaleFrom, scaleTo, details) {\n    /**\r\n     * The length of the original array.\r\n     * @type {number}\r\n     */\n    this.length_ = scaleFrom;\n    /**\r\n     * The scaling factor.\r\n     * @type {number}\r\n     */\n\n    this.scaleFactor_ = (scaleFrom - 1) / scaleTo;\n    /**\r\n     * The interpolation function.\r\n     * @type {Function}\r\n     */\n\n    this.interpolate = this.sinc;\n\n    if (details.method === 'point') {\n      this.interpolate = this.point;\n    } else if (details.method === 'linear') {\n      this.interpolate = this.linear;\n    } else if (details.method === 'cubic') {\n      this.interpolate = this.cubic;\n    }\n    /**\r\n     * The tanget factor for cubic interpolation.\r\n     * @type {number}\r\n     */\n\n\n    this.tangentFactor_ = 1 - Math.max(0, Math.min(1, details.tension || 0)); // Configure the kernel for sinc\n\n    /**\r\n     * The sinc filter size.\r\n     * @type {number}\r\n     */\n\n    this.sincFilterSize_ = details.sincFilterSize || 1;\n    /**\r\n     * The sinc kernel.\r\n     * @type {Function}\r\n     */\n\n    this.kernel_ = sincKernel_(details.sincWindow || window_);\n  }\n  /**\r\n   * @param {number} t The index to interpolate.\r\n   * @param {Array<number>|TypedArray} samples the original array.\r\n   * @return {number} The interpolated value.\r\n   */\n\n\n  point(t, samples) {\n    return this.getClippedInput_(Math.round(this.scaleFactor_ * t), samples);\n  }\n  /**\r\n   * @param {number} t The index to interpolate.\r\n   * @param {Array<number>|TypedArray} samples the original array.\r\n   * @return {number} The interpolated value.\r\n   */\n\n\n  linear(t, samples) {\n    t = this.scaleFactor_ * t;\n    /** @type {number} */\n\n    let k = Math.floor(t);\n    t -= k;\n    return (1 - t) * this.getClippedInput_(k, samples) + t * this.getClippedInput_(k + 1, samples);\n  }\n  /**\r\n   * @param {number} t The index to interpolate.\r\n   * @param {Array<number>|TypedArray} samples the original array.\r\n   * @return {number} The interpolated value.\r\n   */\n\n\n  cubic(t, samples) {\n    t = this.scaleFactor_ * t;\n    /** @type {number} */\n\n    let k = Math.floor(t);\n    /** @type {Array<number>} */\n\n    let m = [this.getTangent_(k, samples), this.getTangent_(k + 1, samples)];\n    /** @type {Array<number>} */\n\n    let p = [this.getClippedInput_(k, samples), this.getClippedInput_(k + 1, samples)];\n    t -= k;\n    /** @type {number} */\n\n    let t2 = t * t;\n    /** @type {number} */\n\n    let t3 = t * t2;\n    return (2 * t3 - 3 * t2 + 1) * p[0] + (t3 - 2 * t2 + t) * m[0] + (-2 * t3 + 3 * t2) * p[1] + (t3 - t2) * m[1];\n  }\n  /**\r\n   * @param {number} t The index to interpolate.\r\n   * @param {Array<number>|TypedArray} samples the original array.\r\n   * @return {number} The interpolated value.\r\n   */\n\n\n  sinc(t, samples) {\n    t = this.scaleFactor_ * t;\n    /** @type {number} */\n\n    let k = Math.floor(t);\n    /** @type {number} */\n\n    let ref = k - this.sincFilterSize_ + 1;\n    /** @type {number} */\n\n    let ref1 = k + this.sincFilterSize_;\n    /** @type {number} */\n\n    let sum = 0;\n\n    for (let n = ref; n <= ref1; n++) {\n      sum += this.kernel_(t - n) * this.getClippedInput_(n, samples);\n    }\n\n    return sum;\n  }\n  /**\r\n   * @param {number} k The scaled index to interpolate.\r\n   * @param {Array<number>|TypedArray} samples the original array.\r\n   * @return {number} The tangent.\r\n   * @private\r\n   */\n\n\n  getTangent_(k, samples) {\n    return this.tangentFactor_ * (this.getClippedInput_(k + 1, samples) - this.getClippedInput_(k - 1, samples)) / 2;\n  }\n  /**\r\n   * @param {number} t The scaled index to interpolate.\r\n   * @param {Array<number>|TypedArray} samples the original array.\r\n   * @return {number} The interpolated value.\r\n   * @private\r\n   */\n\n\n  getClippedInput_(t, samples) {\n    if (0 <= t && t < this.length_) {\n      return samples[t];\n    }\n\n    return 0;\n  }\n\n}\n/**\r\n * The default window function.\r\n * @param {number} x The sinc signal.\r\n * @return {number}\r\n * @private\r\n */\n\nfunction window_(x) {\n  return Math.exp(-x / 2 * x / 2);\n}\n/**\r\n * @param {Function} window The window function.\r\n * @return {Function}\r\n * @private\r\n */\n\n\nfunction sincKernel_(window) {\n  return function (x) {\n    return sinc_(x) * window(x);\n  };\n}\n/**\r\n * @param {number} x The sinc signal.\r\n * @return {number}\r\n * @private\r\n */\n\n\nfunction sinc_(x) {\n  if (x === 0) {\n    return 1;\n  }\n\n  return Math.sin(Math.PI * x) / (Math.PI * x);\n}","map":{"version":3,"sources":["/Users/kevin/Documents/GitHub/Nyquist_Shannon_MVP/frontEnd/node_modules/wavefile/lib/resampler/interpolator.js"],"names":["Interpolator","constructor","scaleFrom","scaleTo","details","length_","scaleFactor_","interpolate","sinc","method","point","linear","cubic","tangentFactor_","Math","max","min","tension","sincFilterSize_","sincFilterSize","kernel_","sincKernel_","sincWindow","window_","t","samples","getClippedInput_","round","k","floor","m","getTangent_","p","t2","t3","ref","ref1","sum","n","x","exp","window","sinc_","sin","PI"],"mappings":"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","sourcesContent":["/*\r\n * Copyright (c) 2019 Rafael da Silva Rocha.\r\n * Copyright 2012 Spencer Cohen\r\n *\r\n * Permission is hereby granted, free of charge, to any person obtaining\r\n * a copy of this software and associated documentation files (the\r\n * \"Software\"), to deal in the Software without restriction, including\r\n * without limitation the rights to use, copy, modify, merge, publish,\r\n * distribute, sublicense, and/or sell copies of the Software, and to\r\n * permit persons to whom the Software is furnished to do so, subject to\r\n * the following conditions:\r\n *\r\n * The above copyright notice and this permission notice shall be\r\n * included in all copies or substantial portions of the Software.\r\n *\r\n * THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND,\r\n * EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF\r\n * MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND\r\n * NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE\r\n * LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION\r\n * OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION\r\n * WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.\r\n *\r\n */\r\n\r\n/**\r\n * @fileoverview The Interpolator class. Based on Smooth.js by Spencer Cohen.\r\n * @see https://github.com/rochars/wavefile\r\n * @see https://github.com/osuushi/Smooth.js\r\n */\r\n\r\n/**\r\n * A class to get scaled values out of arrays.\r\n * @extends WaveFileReader\r\n */\r\nexport class Interpolator {\r\n  \r\n  /**\r\n   * @param {number} scaleFrom the length of the original array.\r\n   * @param {number} scaleTo The length of the new array.\r\n   * @param {!Object} details The extra configuration, if needed.\r\n   */\r\n  constructor(scaleFrom, scaleTo, details) {\r\n    /**\r\n     * The length of the original array.\r\n     * @type {number}\r\n     */\r\n    this.length_ = scaleFrom;\r\n    /**\r\n     * The scaling factor.\r\n     * @type {number}\r\n     */\r\n    this.scaleFactor_ = (scaleFrom - 1) / scaleTo;\r\n    /**\r\n     * The interpolation function.\r\n     * @type {Function}\r\n     */\r\n    this.interpolate = this.sinc;\r\n    if (details.method === 'point') {\r\n    \tthis.interpolate = this.point;\r\n    } else if(details.method === 'linear') {\r\n    \tthis.interpolate = this.linear;\r\n    } else if(details.method === 'cubic') {\r\n    \tthis.interpolate = this.cubic;\r\n    }\r\n    /**\r\n     * The tanget factor for cubic interpolation.\r\n     * @type {number}\r\n     */\r\n    this.tangentFactor_ = 1 - Math.max(0, Math.min(1, details.tension || 0));\r\n    // Configure the kernel for sinc\r\n    /**\r\n     * The sinc filter size.\r\n     * @type {number}\r\n     */\r\n    this.sincFilterSize_ = details.sincFilterSize || 1;\r\n    /**\r\n     * The sinc kernel.\r\n     * @type {Function}\r\n     */\r\n    this.kernel_ = sincKernel_(details.sincWindow || window_);\r\n  }\r\n\r\n  /**\r\n   * @param {number} t The index to interpolate.\r\n   * @param {Array<number>|TypedArray} samples the original array.\r\n   * @return {number} The interpolated value.\r\n   */\r\n  point(t, samples) {\r\n    return this.getClippedInput_(Math.round(this.scaleFactor_ * t), samples);\r\n  }\r\n\r\n  /**\r\n   * @param {number} t The index to interpolate.\r\n   * @param {Array<number>|TypedArray} samples the original array.\r\n   * @return {number} The interpolated value.\r\n   */\r\n  linear(t, samples) {\r\n    t = this.scaleFactor_ * t;\r\n    /** @type {number} */\r\n    let k = Math.floor(t);\r\n    t -= k;\r\n    return (1 - t) *\r\n    \tthis.getClippedInput_(k, samples) + t *\r\n    \tthis.getClippedInput_(k + 1, samples);\r\n  }\r\n\r\n  /**\r\n   * @param {number} t The index to interpolate.\r\n   * @param {Array<number>|TypedArray} samples the original array.\r\n   * @return {number} The interpolated value.\r\n   */\r\n  cubic(t, samples) {\r\n    t = this.scaleFactor_ * t;\r\n    /** @type {number} */\r\n    let k = Math.floor(t);\r\n    /** @type {Array<number>} */\r\n    let m = [this.getTangent_(k, samples), this.getTangent_(k + 1, samples)];\r\n    /** @type {Array<number>} */\r\n    let p = [this.getClippedInput_(k, samples),\r\n      this.getClippedInput_(k + 1, samples)];\r\n    t -= k;\r\n    /** @type {number} */\r\n    let t2 = t * t;\r\n    /** @type {number} */\r\n    let t3 = t * t2;\r\n    return (2 * t3 - 3 * t2 + 1) *\r\n      p[0] + (t3 - 2 * t2 + t) *\r\n      m[0] + (-2 * t3 + 3 * t2) *\r\n      p[1] + (t3 - t2) * m[1];\r\n  }\r\n\r\n  /**\r\n   * @param {number} t The index to interpolate.\r\n   * @param {Array<number>|TypedArray} samples the original array.\r\n   * @return {number} The interpolated value.\r\n   */\r\n  sinc(t, samples) {\r\n    t = this.scaleFactor_ * t;\r\n    /** @type {number} */\r\n    let k = Math.floor(t);\r\n    /** @type {number} */\r\n    let ref = k - this.sincFilterSize_ + 1;\r\n    /** @type {number} */\r\n    let ref1 = k + this.sincFilterSize_;\r\n    /** @type {number} */\r\n    let sum = 0;\r\n    for (let n = ref; n <= ref1; n++) {\r\n      sum += this.kernel_(t - n) * this.getClippedInput_(n, samples);\r\n    }\r\n    return sum;\r\n  }\r\n\r\n  /**\r\n   * @param {number} k The scaled index to interpolate.\r\n   * @param {Array<number>|TypedArray} samples the original array.\r\n   * @return {number} The tangent.\r\n   * @private\r\n   */\r\n  getTangent_(k, samples) {\r\n    return this.tangentFactor_ *\r\n      (this.getClippedInput_(k + 1, samples) -\r\n        this.getClippedInput_(k - 1, samples)) / 2;\r\n  }\r\n\r\n  /**\r\n   * @param {number} t The scaled index to interpolate.\r\n   * @param {Array<number>|TypedArray} samples the original array.\r\n   * @return {number} The interpolated value.\r\n   * @private\r\n   */\r\n  getClippedInput_(t, samples) {\r\n    if ((0 <= t && t < this.length_)) {\r\n      return samples[t];\r\n    }\r\n    return 0;\r\n  }\r\n}\r\n\r\n/**\r\n * The default window function.\r\n * @param {number} x The sinc signal.\r\n * @return {number}\r\n * @private\r\n */\r\nfunction window_(x) {\r\n  return Math.exp(-x / 2 * x / 2);\r\n}\r\n\r\n/**\r\n * @param {Function} window The window function.\r\n * @return {Function}\r\n * @private\r\n */\r\nfunction sincKernel_(window) {\r\n  return function(x) { return sinc_(x) * window(x); };\r\n}\r\n\r\n/**\r\n * @param {number} x The sinc signal.\r\n * @return {number}\r\n * @private\r\n */\r\nfunction sinc_(x) {\r\n  if (x === 0) {\r\n    return 1;\r\n  }\r\n  return Math.sin(Math.PI * x) / (Math.PI * x);\r\n}\r\n"]},"metadata":{},"sourceType":"module"}