{"ast":null,"code":"/*\r\n * Copyright (c) 2017-2019 Rafael da Silva Rocha.\r\n *\r\n * Permission is hereby granted, free of charge, to any person obtaining\r\n * a copy of this software and associated documentation files (the\r\n * \"Software\"), to deal in the Software without restriction, including\r\n * without limitation the rights to use, copy, modify, merge, publish,\r\n * distribute, sublicense, and/or sell copies of the Software, and to\r\n * permit persons to whom the Software is furnished to do so, subject to\r\n * the following conditions:\r\n *\r\n * The above copyright notice and this permission notice shall be\r\n * included in all copies or substantial portions of the Software.\r\n *\r\n * THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND,\r\n * EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF\r\n * MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND\r\n * NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE\r\n * LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION\r\n * OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION\r\n * WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.\r\n *\r\n */\n\n/**\r\n * @fileoverview The interleave function.\r\n * @see https://github.com/rochars/wavefile\r\n */\n\n/**\r\n * Interleave de-interleaved samples.\r\n * @param {!(Array|TypedArray)} samples The samples.\r\n * @return {!(Array|TypedArray)}\r\n */\nexport function interleave(samples) {\n  /** @type {!(Array|TypedArray)} */\n  let finalSamples = [];\n\n  if (samples.length > 0) {\n    if (samples[0].constructor !== Number) {\n      finalSamples = new Float64Array(samples[0].length * samples.length);\n\n      for (let i = 0, len = samples[0].length, x = 0; i < len; i++) {\n        for (let j = 0, subLen = samples.length; j < subLen; j++, x++) {\n          finalSamples[x] = samples[j][i];\n        }\n      }\n    } else {\n      finalSamples = samples;\n    }\n  }\n\n  return finalSamples;\n}\n/**\r\n * De-interleave samples into multiple channels.\r\n * @param {!(Array|TypedArray)} samples The samples.\r\n * @param {number} numChannels The number of channels to split the samples.\r\n * @param {Function} [OutputObject=Float64Array] The type of object to\r\n *   write the de-interleaved samples.\r\n * @return {!(Array|TypedArray)}\r\n */\n\nexport function deInterleave(samples, numChannels) {\n  let OutputObject = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : Float64Array;\n\n  /** @type {!(Array|TypedArray)} */\n  let finalSamples = [];\n\n  for (let i = 0; i < numChannels; i++) {\n    finalSamples[i] = new OutputObject(samples.length / numChannels);\n  }\n\n  for (let i = 0; i < numChannels; i++) {\n    for (let j = i, s = 0; j < samples.length; j += numChannels, s++) {\n      finalSamples[i][s] = samples[j];\n    }\n  }\n\n  return finalSamples;\n}","map":{"version":3,"sources":["/Users/kevin/Documents/GitHub/Nyquist_Shannon_MVP/frontEnd/node_modules/wavefile/lib/parsers/interleave.js"],"names":["interleave","samples","finalSamples","length","constructor","Number","Float64Array","i","len","x","j","subLen","deInterleave","numChannels","OutputObject","s"],"mappings":"AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA,OAAO,SAASA,UAAT,CAAoBC,OAApB,EAA6B;AAClC;AACA,MAAIC,YAAY,GAAG,EAAnB;;AACA,MAAID,OAAO,CAACE,MAAR,GAAiB,CAArB,EAAwB;AACtB,QAAIF,OAAO,CAAC,CAAD,CAAP,CAAWG,WAAX,KAA2BC,MAA/B,EAAuC;AACrCH,MAAAA,YAAY,GAAG,IAAII,YAAJ,CAAiBL,OAAO,CAAC,CAAD,CAAP,CAAWE,MAAX,GAAoBF,OAAO,CAACE,MAA7C,CAAf;;AACA,WAAK,IAAII,CAAC,GAAG,CAAR,EAAWC,GAAG,GAAGP,OAAO,CAAC,CAAD,CAAP,CAAWE,MAA5B,EAAoCM,CAAC,GAAG,CAA7C,EAAgDF,CAAC,GAAGC,GAApD,EAAyDD,CAAC,EAA1D,EAA8D;AAC5D,aAAK,IAAIG,CAAC,GAAG,CAAR,EAAWC,MAAM,GAAGV,OAAO,CAACE,MAAjC,EAAyCO,CAAC,GAAGC,MAA7C,EAAqDD,CAAC,IAAID,CAAC,EAA3D,EAA+D;AAC7DP,UAAAA,YAAY,CAACO,CAAD,CAAZ,GAAkBR,OAAO,CAACS,CAAD,CAAP,CAAWH,CAAX,CAAlB;AACD;AACF;AACF,KAPD,MAOO;AACLL,MAAAA,YAAY,GAAGD,OAAf;AACD;AACF;;AACD,SAAOC,YAAP;AACD;AAED;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AACA,OAAO,SAASU,YAAT,CAAsBX,OAAtB,EAA+BY,WAA/B,EAAuE;AAAA,MAA3BC,YAA2B,uEAAdR,YAAc;;AAC5E;AACA,MAAIJ,YAAY,GAAG,EAAnB;;AACA,OAAK,IAAIK,CAAC,GAAG,CAAb,EAAgBA,CAAC,GAAGM,WAApB,EAAiCN,CAAC,EAAlC,EAAsC;AACpCL,IAAAA,YAAY,CAACK,CAAD,CAAZ,GAAkB,IAAIO,YAAJ,CAAiBb,OAAO,CAACE,MAAR,GAAiBU,WAAlC,CAAlB;AACD;;AACD,OAAK,IAAIN,CAAC,GAAG,CAAb,EAAgBA,CAAC,GAAGM,WAApB,EAAiCN,CAAC,EAAlC,EAAsC;AACpC,SAAK,IAAIG,CAAC,GAAGH,CAAR,EAAWQ,CAAC,GAAG,CAApB,EAAuBL,CAAC,GAAGT,OAAO,CAACE,MAAnC,EAA2CO,CAAC,IAAGG,WAAJ,EAAiBE,CAAC,EAA7D,EAAiE;AAC/Db,MAAAA,YAAY,CAACK,CAAD,CAAZ,CAAgBQ,CAAhB,IAAqBd,OAAO,CAACS,CAAD,CAA5B;AACD;AACF;;AACD,SAAOR,YAAP;AACD","sourcesContent":["/*\r\n * Copyright (c) 2017-2019 Rafael da Silva Rocha.\r\n *\r\n * Permission is hereby granted, free of charge, to any person obtaining\r\n * a copy of this software and associated documentation files (the\r\n * \"Software\"), to deal in the Software without restriction, including\r\n * without limitation the rights to use, copy, modify, merge, publish,\r\n * distribute, sublicense, and/or sell copies of the Software, and to\r\n * permit persons to whom the Software is furnished to do so, subject to\r\n * the following conditions:\r\n *\r\n * The above copyright notice and this permission notice shall be\r\n * included in all copies or substantial portions of the Software.\r\n *\r\n * THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND,\r\n * EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF\r\n * MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND\r\n * NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE\r\n * LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION\r\n * OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION\r\n * WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.\r\n *\r\n */\r\n\r\n/**\r\n * @fileoverview The interleave function.\r\n * @see https://github.com/rochars/wavefile\r\n */\r\n\r\n/**\r\n * Interleave de-interleaved samples.\r\n * @param {!(Array|TypedArray)} samples The samples.\r\n * @return {!(Array|TypedArray)}\r\n */\r\nexport function interleave(samples) {\r\n  /** @type {!(Array|TypedArray)} */\r\n  let finalSamples = [];\r\n  if (samples.length > 0) {\r\n    if (samples[0].constructor !== Number) {\r\n      finalSamples = new Float64Array(samples[0].length * samples.length);\r\n      for (let i = 0, len = samples[0].length, x = 0; i < len; i++) {\r\n        for (let j = 0, subLen = samples.length; j < subLen; j++, x++) {\r\n          finalSamples[x] = samples[j][i];\r\n        }\r\n      }\r\n    } else {\r\n      finalSamples = samples;\r\n    }\r\n  }\r\n  return finalSamples;\r\n}\r\n\r\n/**\r\n * De-interleave samples into multiple channels.\r\n * @param {!(Array|TypedArray)} samples The samples.\r\n * @param {number} numChannels The number of channels to split the samples.\r\n * @param {Function} [OutputObject=Float64Array] The type of object to\r\n *   write the de-interleaved samples.\r\n * @return {!(Array|TypedArray)}\r\n */\r\nexport function deInterleave(samples, numChannels, OutputObject=Float64Array) {\r\n  /** @type {!(Array|TypedArray)} */\r\n  let finalSamples = [];\r\n  for (let i = 0; i < numChannels; i++) {\r\n    finalSamples[i] = new OutputObject(samples.length / numChannels);\r\n  }\r\n  for (let i = 0; i < numChannels; i++) {\r\n    for (let j = i, s = 0; j < samples.length; j+= numChannels, s++) {\r\n      finalSamples[i][s] = samples[j];\r\n    }\r\n  }\r\n  return finalSamples;\r\n}\r\n"]},"metadata":{},"sourceType":"module"}