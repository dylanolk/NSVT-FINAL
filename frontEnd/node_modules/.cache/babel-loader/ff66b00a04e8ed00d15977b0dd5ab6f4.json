{"ast":null,"code":"/*\r\n * Copyright (c) 2019 Rafael da Silva Rocha.\r\n * Copyright (c) 2017 Brett Zamir, 2012 Niklas von Hertzen\r\n *\r\n * Permission is hereby granted, free of charge, to any person obtaining\r\n * a copy of this software and associated documentation files (the\r\n * \"Software\"), to deal in the Software without restriction, including\r\n * without limitation the rights to use, copy, modify, merge, publish,\r\n * distribute, sublicense, and/or sell copies of the Software, and to\r\n * permit persons to whom the Software is furnished to do so, subject to\r\n * the following conditions:\r\n *\r\n * The above copyright notice and this permission notice shall be\r\n * included in all copies or substantial portions of the Software.\r\n *\r\n * THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND,\r\n * EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF\r\n * MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND\r\n * NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE\r\n * LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION\r\n * OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION\r\n * WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.\r\n *\r\n */\nconst chars = 'ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/';\n/**\r\n * Encode a byte buffer as a base64 string.\r\n * @param {!Uint8Array} bytes The buffer.\r\n * @return {string} A .wav file as a DataURI.\r\n */\n\nexport function encode(bytes) {\n  /** @type {string} */\n  let base64 = '';\n\n  for (let i = 0; i < bytes.length; i += 3) {\n    base64 += chars[bytes[i] >> 2];\n    base64 += chars[(bytes[i] & 3) << 4 | bytes[i + 1] >> 4];\n    base64 += chars[(bytes[i + 1] & 15) << 2 | bytes[i + 2] >> 6];\n    base64 += chars[bytes[i + 2] & 63];\n  }\n\n  if (bytes.length % 3 === 2) {\n    base64 = base64.substring(0, base64.length - 1) + '=';\n  } else if (bytes.length % 3 === 1) {\n    base64 = base64.substring(0, base64.length - 2) + '==';\n  }\n\n  return base64;\n}\n/**\r\n * Decode a base64 string as a byte as buffer.\r\n * @param {string} base64 A .wav file as a DataURI.\r\n * @return {!Uint8Array} A .wav file as a DataURI.\r\n */\n\nexport function decode(base64) {\n  /** @type {!Uint8Array} */\n  let lookup = new Uint8Array(256);\n\n  for (let i = 0; i < chars.length; i++) {\n    lookup[chars.charCodeAt(i)] = i;\n  }\n  /** @type {number} */\n\n\n  let bufferLength = base64.length * 0.75;\n\n  if (base64[base64.length - 1] === '=') {\n    bufferLength--;\n\n    if (base64[base64.length - 2] === '=') {\n      bufferLength--;\n    }\n  }\n  /** @type {!Uint8Array} */\n\n\n  let bytes = new Uint8Array(bufferLength);\n\n  for (let i = 0, j = 0; i < base64.length; i += 4) {\n    /** @type {number} */\n    let encoded1 = lookup[base64.charCodeAt(i)];\n    /** @type {number} */\n\n    let encoded2 = lookup[base64.charCodeAt(i + 1)];\n    /** @type {number} */\n\n    let encoded3 = lookup[base64.charCodeAt(i + 2)];\n    /** @type {number} */\n\n    let encoded4 = lookup[base64.charCodeAt(i + 3)];\n    bytes[j++] = encoded1 << 2 | encoded2 >> 4;\n    bytes[j++] = (encoded2 & 15) << 4 | encoded3 >> 2;\n    bytes[j++] = (encoded3 & 3) << 6 | encoded4 & 63;\n  }\n\n  return bytes;\n}","map":{"version":3,"sources":["/Users/kevin/Documents/GitHub/Nyquist_Shannon_MVP/frontEnd/node_modules/wavefile/lib/parsers/base64-arraybuffer.js"],"names":["chars","encode","bytes","base64","i","length","substring","decode","lookup","Uint8Array","charCodeAt","bufferLength","j","encoded1","encoded2","encoded3","encoded4"],"mappings":"AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA,MAAMA,KAAK,GAAG,kEAAd;AAEA;AACA;AACA;AACA;AACA;;AACA,OAAO,SAASC,MAAT,CAAgBC,KAAhB,EAAuB;AAC5B;AACA,MAAIC,MAAM,GAAG,EAAb;;AACA,OAAK,IAAIC,CAAC,GAAG,CAAb,EAAgBA,CAAC,GAAGF,KAAK,CAACG,MAA1B,EAAkCD,CAAC,IAAI,CAAvC,EAA0C;AACxCD,IAAAA,MAAM,IAAIH,KAAK,CAACE,KAAK,CAACE,CAAD,CAAL,IAAY,CAAb,CAAf;AACAD,IAAAA,MAAM,IAAIH,KAAK,CAAC,CAACE,KAAK,CAACE,CAAD,CAAL,GAAW,CAAZ,KAAkB,CAAlB,GAAsBF,KAAK,CAACE,CAAC,GAAG,CAAL,CAAL,IAAgB,CAAvC,CAAf;AACAD,IAAAA,MAAM,IAAIH,KAAK,CAAC,CAACE,KAAK,CAACE,CAAC,GAAG,CAAL,CAAL,GAAe,EAAhB,KAAuB,CAAvB,GAA2BF,KAAK,CAACE,CAAC,GAAG,CAAL,CAAL,IAAgB,CAA5C,CAAf;AACAD,IAAAA,MAAM,IAAIH,KAAK,CAACE,KAAK,CAACE,CAAC,GAAG,CAAL,CAAL,GAAe,EAAhB,CAAf;AACD;;AACD,MAAIF,KAAK,CAACG,MAAN,GAAe,CAAf,KAAqB,CAAzB,EAA4B;AAC1BF,IAAAA,MAAM,GAAGA,MAAM,CAACG,SAAP,CAAiB,CAAjB,EAAoBH,MAAM,CAACE,MAAP,GAAgB,CAApC,IAAyC,GAAlD;AACD,GAFD,MAEO,IAAIH,KAAK,CAACG,MAAN,GAAe,CAAf,KAAqB,CAAzB,EAA4B;AACjCF,IAAAA,MAAM,GAAGA,MAAM,CAACG,SAAP,CAAiB,CAAjB,EAAoBH,MAAM,CAACE,MAAP,GAAgB,CAApC,IAAyC,IAAlD;AACD;;AACD,SAAOF,MAAP;AACD;AAED;AACA;AACA;AACA;AACA;;AACA,OAAO,SAASI,MAAT,CAAgBJ,MAAhB,EAAwB;AAC7B;AACA,MAAIK,MAAM,GAAG,IAAIC,UAAJ,CAAe,GAAf,CAAb;;AACA,OAAK,IAAIL,CAAC,GAAG,CAAb,EAAgBA,CAAC,GAAGJ,KAAK,CAACK,MAA1B,EAAkCD,CAAC,EAAnC,EAAuC;AACrCI,IAAAA,MAAM,CAACR,KAAK,CAACU,UAAN,CAAiBN,CAAjB,CAAD,CAAN,GAA8BA,CAA9B;AACD;AACD;;;AACA,MAAIO,YAAY,GAAGR,MAAM,CAACE,MAAP,GAAgB,IAAnC;;AACA,MAAIF,MAAM,CAACA,MAAM,CAACE,MAAP,GAAgB,CAAjB,CAAN,KAA8B,GAAlC,EAAuC;AACrCM,IAAAA,YAAY;;AACZ,QAAIR,MAAM,CAACA,MAAM,CAACE,MAAP,GAAgB,CAAjB,CAAN,KAA8B,GAAlC,EAAuC;AACrCM,MAAAA,YAAY;AACb;AACF;AACD;;;AACA,MAAIT,KAAK,GAAG,IAAIO,UAAJ,CAAeE,YAAf,CAAZ;;AACA,OAAK,IAAIP,CAAC,GAAG,CAAR,EAAWQ,CAAC,GAAG,CAApB,EAAuBR,CAAC,GAAGD,MAAM,CAACE,MAAlC,EAA0CD,CAAC,IAAI,CAA/C,EAAkD;AAChD;AACA,QAAIS,QAAQ,GAAGL,MAAM,CAACL,MAAM,CAACO,UAAP,CAAkBN,CAAlB,CAAD,CAArB;AACA;;AACA,QAAIU,QAAQ,GAAGN,MAAM,CAACL,MAAM,CAACO,UAAP,CAAkBN,CAAC,GAAG,CAAtB,CAAD,CAArB;AACA;;AACA,QAAIW,QAAQ,GAAGP,MAAM,CAACL,MAAM,CAACO,UAAP,CAAkBN,CAAC,GAAG,CAAtB,CAAD,CAArB;AACA;;AACA,QAAIY,QAAQ,GAAGR,MAAM,CAACL,MAAM,CAACO,UAAP,CAAkBN,CAAC,GAAG,CAAtB,CAAD,CAArB;AACAF,IAAAA,KAAK,CAACU,CAAC,EAAF,CAAL,GAAaC,QAAQ,IAAI,CAAZ,GAAgBC,QAAQ,IAAI,CAAzC;AACAZ,IAAAA,KAAK,CAACU,CAAC,EAAF,CAAL,GAAa,CAACE,QAAQ,GAAG,EAAZ,KAAmB,CAAnB,GAAuBC,QAAQ,IAAI,CAAhD;AACAb,IAAAA,KAAK,CAACU,CAAC,EAAF,CAAL,GAAa,CAACG,QAAQ,GAAG,CAAZ,KAAkB,CAAlB,GAAsBC,QAAQ,GAAG,EAA9C;AACD;;AACD,SAAOd,KAAP;AACD","sourcesContent":["/*\r\n * Copyright (c) 2019 Rafael da Silva Rocha.\r\n * Copyright (c) 2017 Brett Zamir, 2012 Niklas von Hertzen\r\n *\r\n * Permission is hereby granted, free of charge, to any person obtaining\r\n * a copy of this software and associated documentation files (the\r\n * \"Software\"), to deal in the Software without restriction, including\r\n * without limitation the rights to use, copy, modify, merge, publish,\r\n * distribute, sublicense, and/or sell copies of the Software, and to\r\n * permit persons to whom the Software is furnished to do so, subject to\r\n * the following conditions:\r\n *\r\n * The above copyright notice and this permission notice shall be\r\n * included in all copies or substantial portions of the Software.\r\n *\r\n * THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND,\r\n * EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF\r\n * MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND\r\n * NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE\r\n * LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION\r\n * OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION\r\n * WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.\r\n *\r\n */\r\n\r\nconst chars = 'ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/';\r\n\r\n/**\r\n * Encode a byte buffer as a base64 string.\r\n * @param {!Uint8Array} bytes The buffer.\r\n * @return {string} A .wav file as a DataURI.\r\n */\r\nexport function encode(bytes) {\r\n  /** @type {string} */\r\n  let base64 = '';\r\n  for (let i = 0; i < bytes.length; i += 3) {\r\n    base64 += chars[bytes[i] >> 2];\r\n    base64 += chars[(bytes[i] & 3) << 4 | bytes[i + 1] >> 4];\r\n    base64 += chars[(bytes[i + 1] & 15) << 2 | bytes[i + 2] >> 6];\r\n    base64 += chars[bytes[i + 2] & 63];\r\n  }\r\n  if (bytes.length % 3 === 2) {\r\n    base64 = base64.substring(0, base64.length - 1) + '=';\r\n  } else if (bytes.length % 3 === 1) {\r\n    base64 = base64.substring(0, base64.length - 2) + '==';\r\n  }\r\n  return base64;\r\n}\r\n\r\n/**\r\n * Decode a base64 string as a byte as buffer.\r\n * @param {string} base64 A .wav file as a DataURI.\r\n * @return {!Uint8Array} A .wav file as a DataURI.\r\n */\r\nexport function decode(base64) {\r\n  /** @type {!Uint8Array} */\r\n  let lookup = new Uint8Array(256);\r\n  for (let i = 0; i < chars.length; i++) {\r\n    lookup[chars.charCodeAt(i)] = i;\r\n  }\r\n  /** @type {number} */\r\n  let bufferLength = base64.length * 0.75;\r\n  if (base64[base64.length - 1] === '=') {\r\n    bufferLength--;\r\n    if (base64[base64.length - 2] === '=') {\r\n      bufferLength--;\r\n    }\r\n  }\r\n  /** @type {!Uint8Array} */\r\n  let bytes = new Uint8Array(bufferLength);\r\n  for (let i = 0, j = 0; i < base64.length; i += 4) {\r\n    /** @type {number} */\r\n    let encoded1 = lookup[base64.charCodeAt(i)];\r\n    /** @type {number} */\r\n    let encoded2 = lookup[base64.charCodeAt(i + 1)];\r\n    /** @type {number} */\r\n    let encoded3 = lookup[base64.charCodeAt(i + 2)];\r\n    /** @type {number} */\r\n    let encoded4 = lookup[base64.charCodeAt(i + 3)];\r\n    bytes[j++] = encoded1 << 2 | encoded2 >> 4;\r\n    bytes[j++] = (encoded2 & 15) << 4 | encoded3 >> 2;\r\n    bytes[j++] = (encoded3 & 3) << 6 | encoded4 & 63;\r\n  }\r\n  return bytes;\r\n}\r\n"]},"metadata":{},"sourceType":"module"}