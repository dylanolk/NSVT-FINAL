{"ast":null,"code":"/*\r\n * Copyright (c) 2019 Rafael da Silva Rocha.\r\n * Copyright (c) 2014 Florian Markert\r\n *\r\n * Permission is hereby granted, free of charge, to any person obtaining\r\n * a copy of this software and associated documentation files (the\r\n * \"Software\"), to deal in the Software without restriction, including\r\n * without limitation the rights to use, copy, modify, merge, publish,\r\n * distribute, sublicense, and/or sell copies of the Software, and to\r\n * permit persons to whom the Software is furnished to do so, subject to\r\n * the following conditions:\r\n *\r\n * The above copyright notice and this permission notice shall be\r\n * included in all copies or substantial portions of the Software.\r\n *\r\n * THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND,\r\n * EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF\r\n * MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND\r\n * NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE\r\n * LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION\r\n * OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION\r\n * WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.\r\n *\r\n */\n\n/**\r\n * @fileoverview FIR LPF. Based on the FIR LPF from Fili by Florian Markert.\r\n * @see https://github.com/rochars/wavefile\r\n * @see https://github.com/markert/fili.js\r\n */\n\n/**\r\n * A FIR low pass filter.\r\n */\nexport class FIRLPF {\n  /**\r\n   * @param {number} order The order of the filter.\r\n   * @param {number} sampleRate The sample rate.\r\n   * @param {number} cutOff The cut off frequency.\r\n   */\n  constructor(order, sampleRate, cutOff) {\n    /** @type {number} */\n    let omega = 2 * Math.PI * cutOff / sampleRate;\n    /** @type {number} */\n\n    let dc = 0;\n    this.filters = [];\n\n    for (let i = 0; i <= order; i++) {\n      if (i - order / 2 === 0) {\n        this.filters[i] = omega;\n      } else {\n        this.filters[i] = Math.sin(omega * (i - order / 2)) / (i - order / 2); // Hamming window\n\n        this.filters[i] *= 0.54 - 0.46 * Math.cos(2 * Math.PI * i / order);\n      }\n\n      dc = dc + this.filters[i];\n    } // normalize\n\n\n    for (let i = 0; i <= order; i++) {\n      this.filters[i] /= dc;\n    }\n\n    this.z = this.initZ_();\n  }\n  /**\r\n   * @param {number} sample A sample of a sequence.\r\n   * @return {number}\r\n   */\n\n\n  filter(sample) {\n    this.z.buf[this.z.pointer] = sample;\n    /** @type {number} */\n\n    let out = 0;\n\n    for (let i = 0, len = this.z.buf.length; i < len; i++) {\n      out += this.filters[i] * this.z.buf[(this.z.pointer + i) % this.z.buf.length];\n    }\n\n    this.z.pointer = (this.z.pointer + 1) % this.z.buf.length;\n    return out;\n  }\n  /**\r\n   * Reset the filter.\r\n   */\n\n\n  reset() {\n    this.z = this.initZ_();\n  }\n  /**\r\n   * Return the default value for z.\r\n   * @private\r\n   */\n\n\n  initZ_() {\n    /** @type {!Array} */\n    let r = [];\n\n    for (let i = 0; i < this.filters.length - 1; i++) {\n      r.push(0);\n    }\n\n    return {\n      buf: r,\n      pointer: 0\n    };\n  }\n\n}","map":{"version":3,"sources":["/Users/kevin/Documents/GitHub/Nyquist_Shannon_MVP/frontEnd/node_modules/wavefile/lib/resampler/fir-lpf.js"],"names":["FIRLPF","constructor","order","sampleRate","cutOff","omega","Math","PI","dc","filters","i","sin","cos","z","initZ_","filter","sample","buf","pointer","out","len","length","reset","r","push"],"mappings":"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","sourcesContent":["/*\r\n * Copyright (c) 2019 Rafael da Silva Rocha.\r\n * Copyright (c) 2014 Florian Markert\r\n *\r\n * Permission is hereby granted, free of charge, to any person obtaining\r\n * a copy of this software and associated documentation files (the\r\n * \"Software\"), to deal in the Software without restriction, including\r\n * without limitation the rights to use, copy, modify, merge, publish,\r\n * distribute, sublicense, and/or sell copies of the Software, and to\r\n * permit persons to whom the Software is furnished to do so, subject to\r\n * the following conditions:\r\n *\r\n * The above copyright notice and this permission notice shall be\r\n * included in all copies or substantial portions of the Software.\r\n *\r\n * THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND,\r\n * EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF\r\n * MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND\r\n * NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE\r\n * LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION\r\n * OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION\r\n * WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.\r\n *\r\n */\r\n\r\n/**\r\n * @fileoverview FIR LPF. Based on the FIR LPF from Fili by Florian Markert.\r\n * @see https://github.com/rochars/wavefile\r\n * @see https://github.com/markert/fili.js\r\n */\r\n\r\n/**\r\n * A FIR low pass filter.\r\n */\r\nexport class FIRLPF {\r\n  \r\n  /**\r\n   * @param {number} order The order of the filter.\r\n   * @param {number} sampleRate The sample rate.\r\n   * @param {number} cutOff The cut off frequency.\r\n   */\r\n  constructor(order, sampleRate, cutOff) {\r\n    /** @type {number} */\r\n    let omega = 2 * Math.PI * cutOff / sampleRate;\r\n    /** @type {number} */\r\n    let dc = 0;\r\n    this.filters = [];\r\n    for (let i = 0; i <= order; i++) {\r\n      if (i - order / 2 === 0) {\r\n        this.filters[i] = omega;\r\n      } else {\r\n        this.filters[i] = Math.sin(omega * (i - order / 2)) / (i - order / 2);\r\n        // Hamming window\r\n        this.filters[i] *= (0.54 - 0.46 * Math.cos(2 * Math.PI * i / order));\r\n      }\r\n      dc = dc + this.filters[i];\r\n    }\r\n    // normalize\r\n    for (let i = 0; i <= order; i++) {\r\n      this.filters[i] /= dc;\r\n    }\r\n    this.z = this.initZ_();\r\n  }\r\n\r\n  /**\r\n   * @param {number} sample A sample of a sequence.\r\n   * @return {number}\r\n   */\r\n  filter(sample) {\r\n    this.z.buf[this.z.pointer] = sample;\r\n    /** @type {number} */\r\n    let out = 0;\r\n    for (let i = 0, len = this.z.buf.length; i < len; i++) {\r\n      out += (\r\n        this.filters[i] * this.z.buf[(this.z.pointer + i) % this.z.buf.length]);\r\n    }\r\n    this.z.pointer = (this.z.pointer + 1) % (this.z.buf.length);\r\n    return out;\r\n  }\r\n\r\n  /**\r\n   * Reset the filter.\r\n   */\r\n  reset() {\r\n    this.z = this.initZ_();\r\n  }\r\n\r\n  /**\r\n   * Return the default value for z.\r\n   * @private\r\n   */\r\n  initZ_() {\r\n    /** @type {!Array} */\r\n    let r = [];\r\n    for (let i = 0; i < this.filters.length - 1; i++) {\r\n      r.push(0);\r\n    }\r\n    return {\r\n      buf: r,\r\n      pointer: 0\r\n    };\r\n  }\r\n}\r\n"]},"metadata":{},"sourceType":"module"}