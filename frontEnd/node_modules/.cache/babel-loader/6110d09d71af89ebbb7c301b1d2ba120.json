{"ast":null,"code":"var _jsxFileName = \"/Users/kevin/Documents/GitHub/Nyquist_Shannon_MVP/frontEnd/src/components/wavplayer/PlayAudio.js\";\nimport React, { useState, useEffect } from \"react\";\nimport \"react-h5-audio-player/lib/styles.css\";\nimport { WaveFile } from \"wavefile\";\nimport fs from \"fs\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nclass PlayAudio extends React.Component {\n  constructor(props) {\n    super(props);\n  }\n\n  render() {\n    const fileName = \"processedAudio\" + Date.now();\n    const audioFile = new File([this.props.processed], `${fileName}.wav`, {\n      type: \"audio/wav\",\n      lastModified: Date.now()\n    });\n    console.log(\"audioFile:\", audioFile);\n    let wav = new WaveFile();\n    console.log(\"this.props.data\", this.props.data);\n\n    if (this.props.data) {\n      console.log(\"inside if \", JSON.parse(this.props.data)[1][0]);\n      wav.fromScratch(1, 44100, \"8\", JSON.parse(this.props.data)[1][0]);\n      console.log(\"audioFile wav :\", wav); // fs.writeFileSync(\"../\" + fileName, wav.toBuffer());\n    } // wav.toSampleRate(22050);\n\n\n    return /*#__PURE__*/_jsxDEV(\"div\", {\n      children: [/*#__PURE__*/_jsxDEV(\"div\", {\n        class: \"originalAudio\",\n        children: [/*#__PURE__*/_jsxDEV(\"p\", {\n          children: \"This is the original.\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 33,\n          columnNumber: 11\n        }, this), this.props.audio && /*#__PURE__*/_jsxDEV(\"audio\", {\n          controls: true,\n          src: \"data:audio/wav;base64,\" + this.props.audio\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 35,\n          columnNumber: 13\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 32,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        class: \"compressedAudio\",\n        children: [/*#__PURE__*/_jsxDEV(\"p\", {\n          children: \"This is the processed audio.\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 42,\n          columnNumber: 11\n        }, this), this.props.audio && /*#__PURE__*/_jsxDEV(\"audio\", {\n          controls: true,\n          src: \"data:audio/wav;base64,\" + this.props.processed\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 44,\n          columnNumber: 13\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 41,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 31,\n      columnNumber: 7\n    }, this);\n  }\n\n}\n\nexport default PlayAudio;","map":{"version":3,"sources":["/Users/kevin/Documents/GitHub/Nyquist_Shannon_MVP/frontEnd/src/components/wavplayer/PlayAudio.js"],"names":["React","useState","useEffect","WaveFile","fs","PlayAudio","Component","constructor","props","render","fileName","Date","now","audioFile","File","processed","type","lastModified","console","log","wav","data","JSON","parse","fromScratch","audio"],"mappings":";AAAA,OAAOA,KAAP,IAAgBC,QAAhB,EAA0BC,SAA1B,QAA2C,OAA3C;AACA,OAAO,sCAAP;AACA,SAASC,QAAT,QAAyB,UAAzB;AACA,OAAOC,EAAP,MAAe,IAAf;;;AAEA,MAAMC,SAAN,SAAwBL,KAAK,CAACM,SAA9B,CAAwC;AACtCC,EAAAA,WAAW,CAACC,KAAD,EAAQ;AACjB,UAAMA,KAAN;AACD;;AAEDC,EAAAA,MAAM,GAAG;AACP,UAAMC,QAAQ,GAAG,mBAAmBC,IAAI,CAACC,GAAL,EAApC;AACA,UAAMC,SAAS,GAAG,IAAIC,IAAJ,CAAS,CAAC,KAAKN,KAAL,CAAWO,SAAZ,CAAT,EAAkC,GAAEL,QAAS,MAA7C,EAAoD;AACpEM,MAAAA,IAAI,EAAE,WAD8D;AAEpEC,MAAAA,YAAY,EAAEN,IAAI,CAACC,GAAL;AAFsD,KAApD,CAAlB;AAIAM,IAAAA,OAAO,CAACC,GAAR,CAAY,YAAZ,EAA0BN,SAA1B;AAEA,QAAIO,GAAG,GAAG,IAAIjB,QAAJ,EAAV;AACAe,IAAAA,OAAO,CAACC,GAAR,CAAY,iBAAZ,EAA+B,KAAKX,KAAL,CAAWa,IAA1C;;AACA,QAAI,KAAKb,KAAL,CAAWa,IAAf,EAAqB;AACnBH,MAAAA,OAAO,CAACC,GAAR,CAAY,YAAZ,EAA0BG,IAAI,CAACC,KAAL,CAAW,KAAKf,KAAL,CAAWa,IAAtB,EAA4B,CAA5B,EAA+B,CAA/B,CAA1B;AACAD,MAAAA,GAAG,CAACI,WAAJ,CAAgB,CAAhB,EAAmB,KAAnB,EAA0B,GAA1B,EAA+BF,IAAI,CAACC,KAAL,CAAW,KAAKf,KAAL,CAAWa,IAAtB,EAA4B,CAA5B,EAA+B,CAA/B,CAA/B;AACAH,MAAAA,OAAO,CAACC,GAAR,CAAY,iBAAZ,EAA+BC,GAA/B,EAHmB,CAInB;AACD,KAfM,CAiBP;;;AAEA,wBACE;AAAA,8BACE;AAAK,QAAA,KAAK,EAAC,eAAX;AAAA,gCACE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,gBADF,EAEG,KAAKZ,KAAL,CAAWiB,KAAX,iBACC;AACE,UAAA,QAAQ,MADV;AAEE,UAAA,GAAG,EAAE,2BAA2B,KAAKjB,KAAL,CAAWiB;AAF7C;AAAA;AAAA;AAAA;AAAA,gBAHJ;AAAA;AAAA;AAAA;AAAA;AAAA,cADF,eAUE;AAAK,QAAA,KAAK,EAAC,iBAAX;AAAA,gCACE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,gBADF,EAEG,KAAKjB,KAAL,CAAWiB,KAAX,iBACC;AACE,UAAA,QAAQ,MADV;AAEE,UAAA,GAAG,EAAE,2BAA2B,KAAKjB,KAAL,CAAWO;AAF7C;AAAA;AAAA;AAAA;AAAA,gBAHJ;AAAA;AAAA;AAAA;AAAA;AAAA,cAVF;AAAA;AAAA;AAAA;AAAA;AAAA,YADF;AAsBD;;AA9CqC;;AAiDxC,eAAeV,SAAf","sourcesContent":["import React, { useState, useEffect } from \"react\";\nimport \"react-h5-audio-player/lib/styles.css\";\nimport { WaveFile } from \"wavefile\";\nimport fs from \"fs\";\n\nclass PlayAudio extends React.Component {\n  constructor(props) {\n    super(props);\n  }\n\n  render() {\n    const fileName = \"processedAudio\" + Date.now();\n    const audioFile = new File([this.props.processed], `${fileName}.wav`, {\n      type: \"audio/wav\",\n      lastModified: Date.now(),\n    });\n    console.log(\"audioFile:\", audioFile);\n\n    let wav = new WaveFile();\n    console.log(\"this.props.data\", this.props.data);\n    if (this.props.data) {\n      console.log(\"inside if \", JSON.parse(this.props.data)[1][0]);\n      wav.fromScratch(1, 44100, \"8\", JSON.parse(this.props.data)[1][0]);\n      console.log(\"audioFile wav :\", wav);\n      // fs.writeFileSync(\"../\" + fileName, wav.toBuffer());\n    }\n\n    // wav.toSampleRate(22050);\n\n    return (\n      <div>\n        <div class=\"originalAudio\">\n          <p>This is the original.</p>\n          {this.props.audio && (\n            <audio\n              controls\n              src={\"data:audio/wav;base64,\" + this.props.audio}\n            ></audio>\n          )}\n        </div>\n        <div class=\"compressedAudio\">\n          <p>This is the processed audio.</p>\n          {this.props.audio && (\n            <audio\n              controls\n              src={\"data:audio/wav;base64,\" + this.props.processed}\n            ></audio>\n          )}\n        </div>\n      </div>\n    );\n  }\n}\n\nexport default PlayAudio;\n"]},"metadata":{},"sourceType":"module"}