{"ast":null,"code":"/*\r\n * Copyright (c) 2019 Rafael da Silva Rocha.\r\n * Copyright (c) 2014 Florian Markert\r\n *\r\n * Permission is hereby granted, free of charge, to any person obtaining\r\n * a copy of this software and associated documentation files (the\r\n * \"Software\"), to deal in the Software without restriction, including\r\n * without limitation the rights to use, copy, modify, merge, publish,\r\n * distribute, sublicense, and/or sell copies of the Software, and to\r\n * permit persons to whom the Software is furnished to do so, subject to\r\n * the following conditions:\r\n *\r\n * The above copyright notice and this permission notice shall be\r\n * included in all copies or substantial portions of the Software.\r\n *\r\n * THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND,\r\n * EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF\r\n * MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND\r\n * NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE\r\n * LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION\r\n * OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION\r\n * WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.\r\n *\r\n */\n\n/**\r\n * @fileoverview Butterworth LPF. Based on the Butterworth LPF from Fili.js.\r\n * @see https://github.com/rochars/wavefile\r\n * @see https://github.com/markert/fili.js\r\n */\n\n/**\r\n * Butterworth LPF.\r\n */\nexport class ButterworthLPF {\n  /**\r\n   * @param {number} order The order of the filter.\r\n   * @param {number} sampleRate The sample rate.\r\n   * @param {number} cutOff The cut off frequency.\r\n   */\n  constructor(order, sampleRate, cutOff) {\n    /** @type {!Array} */\n    let filters = [];\n\n    for (let i = 0; i < order; i++) {\n      filters.push(this.getCoeffs_({\n        Fs: sampleRate,\n        Fc: cutOff,\n        Q: 0.5 / Math.sin(Math.PI / (order * 2) * (i + 0.5))\n      }));\n    }\n\n    this.stages = [];\n\n    for (let i = 0; i < filters.length; i++) {\n      this.stages[i] = {\n        b0: filters[i].b[0],\n        b1: filters[i].b[1],\n        b2: filters[i].b[2],\n        a1: filters[i].a[0],\n        a2: filters[i].a[1],\n        k: filters[i].k,\n        z: [0, 0]\n      };\n    }\n  }\n  /**\r\n   * @param {number} sample A sample of a sequence.\r\n   * @return {number}\r\n   */\n\n\n  filter(sample) {\n    /** @type {number} */\n    let out = sample;\n\n    for (let i = 0, len = this.stages.length; i < len; i++) {\n      out = this.runStage_(i, out);\n    }\n\n    return out;\n  }\n  /**\r\n   * @param {!Object} params The filter params.\r\n   * @return {!Object}\r\n   */\n\n\n  getCoeffs_(params) {\n    /** @type {!Object} */\n    let coeffs = {};\n    coeffs.a = [];\n    coeffs.b = [];\n    /** @type {!Object} */\n\n    let p = this.preCalc_(params, coeffs);\n    coeffs.k = 1;\n    coeffs.b.push((1 - p.cw) / (2 * p.a0));\n    coeffs.b.push(2 * coeffs.b[0]);\n    coeffs.b.push(coeffs.b[0]);\n    return coeffs;\n  }\n  /**\r\n   * @param {!Object} params The filter params.\r\n   * @param {!Object} coeffs The coefficients template.\r\n   * @return {!Object}\r\n   */\n\n\n  preCalc_(params, coeffs) {\n    /** @type {!Object} */\n    let pre = {};\n    /** @type {number} */\n\n    let w = 2 * Math.PI * params.Fc / params.Fs;\n    pre.alpha = Math.sin(w) / (2 * params.Q);\n    pre.cw = Math.cos(w);\n    pre.a0 = 1 + pre.alpha;\n    coeffs.a0 = pre.a0;\n    coeffs.a.push(-2 * pre.cw / pre.a0);\n    coeffs.k = 1;\n    coeffs.a.push((1 - pre.alpha) / pre.a0);\n    return pre;\n  }\n  /**\r\n   * @param {number} i The stage index.\r\n   * @param {number} sample The sample.\r\n   * @return {number}\r\n   */\n\n\n  runStage_(i, sample) {\n    /** @type {number} */\n    let temp = sample * this.stages[i].k - this.stages[i].a1 * this.stages[i].z[0] - this.stages[i].a2 * this.stages[i].z[1];\n    /** @type {number} */\n\n    let out = this.stages[i].b0 * temp + this.stages[i].b1 * this.stages[i].z[0] + this.stages[i].b2 * this.stages[i].z[1];\n    this.stages[i].z[1] = this.stages[i].z[0];\n    this.stages[i].z[0] = temp;\n    return out;\n  }\n  /**\r\n   * Reset the filter.\r\n   */\n\n\n  reset() {\n    for (let i = 0; i < this.stages.length; i++) {\n      this.stages[i].z = [0, 0];\n    }\n  }\n\n}","map":{"version":3,"sources":["/Users/kevin/Documents/GitHub/Nyquist_Shannon_MVP/frontEnd/node_modules/wavefile/lib/resampler/butterworth-lpf.js"],"names":["ButterworthLPF","constructor","order","sampleRate","cutOff","filters","i","push","getCoeffs_","Fs","Fc","Q","Math","sin","PI","stages","length","b0","b","b1","b2","a1","a","a2","k","z","filter","sample","out","len","runStage_","params","coeffs","p","preCalc_","cw","a0","pre","w","alpha","cos","temp","reset"],"mappings":"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","sourcesContent":["/*\r\n * Copyright (c) 2019 Rafael da Silva Rocha.\r\n * Copyright (c) 2014 Florian Markert\r\n *\r\n * Permission is hereby granted, free of charge, to any person obtaining\r\n * a copy of this software and associated documentation files (the\r\n * \"Software\"), to deal in the Software without restriction, including\r\n * without limitation the rights to use, copy, modify, merge, publish,\r\n * distribute, sublicense, and/or sell copies of the Software, and to\r\n * permit persons to whom the Software is furnished to do so, subject to\r\n * the following conditions:\r\n *\r\n * The above copyright notice and this permission notice shall be\r\n * included in all copies or substantial portions of the Software.\r\n *\r\n * THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND,\r\n * EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF\r\n * MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND\r\n * NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE\r\n * LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION\r\n * OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION\r\n * WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.\r\n *\r\n */\r\n\r\n/**\r\n * @fileoverview Butterworth LPF. Based on the Butterworth LPF from Fili.js.\r\n * @see https://github.com/rochars/wavefile\r\n * @see https://github.com/markert/fili.js\r\n */\r\n\r\n/**\r\n * Butterworth LPF.\r\n */\r\nexport class ButterworthLPF {\r\n  \r\n  /**\r\n   * @param {number} order The order of the filter.\r\n   * @param {number} sampleRate The sample rate.\r\n   * @param {number} cutOff The cut off frequency.\r\n   */\r\n  constructor(order, sampleRate, cutOff) {\r\n    /** @type {!Array} */\r\n    let filters = [];\r\n    for (let i = 0; i < order; i++) {\r\n      filters.push(this.getCoeffs_({\r\n        Fs: sampleRate,\r\n        Fc: cutOff,\r\n        Q: 0.5 / (Math.sin((Math.PI / (order * 2)) * (i + 0.5)))\r\n      }));\r\n    }\r\n    this.stages = [];\r\n    for (let i = 0; i < filters.length; i++) {\r\n      this.stages[i] = {\r\n        b0 : filters[i].b[0],\r\n        b1 : filters[i].b[1],\r\n        b2 : filters[i].b[2],\r\n        a1 : filters[i].a[0],\r\n        a2 : filters[i].a[1],\r\n        k : filters[i].k,\r\n        z : [0, 0]\r\n      };\r\n    }\r\n  }\r\n\r\n  /**\r\n   * @param {number} sample A sample of a sequence.\r\n   * @return {number}\r\n   */\r\n  filter(sample) {\r\n    /** @type {number} */\r\n    let out = sample;\r\n    for (let i = 0, len = this.stages.length; i < len; i++) {\r\n      out = this.runStage_(i, out);\r\n    }\r\n    return out;\r\n  }\r\n\r\n  /**\r\n   * @param {!Object} params The filter params.\r\n   * @return {!Object}\r\n   */\r\n  getCoeffs_(params) {\r\n    /** @type {!Object} */\r\n    let coeffs = {};\r\n    coeffs.a = [];\r\n    coeffs.b = [];\r\n    /** @type {!Object} */\r\n    let p = this.preCalc_(params, coeffs);\r\n    coeffs.k = 1;\r\n    coeffs.b.push((1 - p.cw) / (2 * p.a0));\r\n    coeffs.b.push(2 * coeffs.b[0]);\r\n    coeffs.b.push(coeffs.b[0]);\r\n    return coeffs;\r\n  }\r\n\r\n  /**\r\n   * @param {!Object} params The filter params.\r\n   * @param {!Object} coeffs The coefficients template.\r\n   * @return {!Object}\r\n   */\r\n  preCalc_(params, coeffs) {\r\n    /** @type {!Object} */\r\n    let pre = {};\r\n    /** @type {number} */\r\n    let w = 2 * Math.PI * params.Fc / params.Fs;\r\n    pre.alpha = Math.sin(w) / (2 * params.Q);\r\n    pre.cw = Math.cos(w);\r\n    pre.a0 = 1 + pre.alpha;\r\n    coeffs.a0 = pre.a0;\r\n    coeffs.a.push((-2 * pre.cw) / pre.a0);\r\n    coeffs.k = 1;\r\n    coeffs.a.push((1 - pre.alpha) / pre.a0);\r\n    return pre;\r\n  }\r\n  \r\n  /**\r\n   * @param {number} i The stage index.\r\n   * @param {number} sample The sample.\r\n   * @return {number}\r\n   */\r\n  runStage_(i, sample) {\r\n    /** @type {number} */\r\n    let temp = sample * this.stages[i].k - this.stages[i].a1 *\r\n      this.stages[i].z[0] - this.stages[i].a2 * this.stages[i].z[1];\r\n    /** @type {number} */\r\n    let out = this.stages[i].b0 * temp + this.stages[i].b1 *\r\n      this.stages[i].z[0] + this.stages[i].b2 * this.stages[i].z[1];\r\n    this.stages[i].z[1] = this.stages[i].z[0];\r\n    this.stages[i].z[0] = temp;\r\n    return out;\r\n  }\r\n\r\n  /**\r\n   * Reset the filter.\r\n   */\r\n  reset() {\r\n    for (let i = 0; i < this.stages.length; i++) {\r\n      this.stages[i].z = [0, 0];\r\n    }\r\n  }\r\n}\r\n"]},"metadata":{},"sourceType":"module"}